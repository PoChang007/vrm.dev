<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VRM – gltf</title>
    <link>https://vrm.dev/tags/gltf/</link>
    <description>Recent content in gltf on VRM</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Apr 2021 16:09:47 +0900</lastBuildDate>
    
	  <atom:link href="https://vrm.dev/tags/gltf/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: GLTFについて</title>
      <link>https://vrm.dev/docs/univrm/gltf/gltf_about/</link>
      <pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/gltf/gltf_about/</guid>
      <description>
        
        
        &lt;p&gt;glTFはOpenGLの仕様策定をしているKHRONOSによる3Dフォーマットです。2017年にVersion2が策定されました。
VRMはglTF2.0をベースとしたフォーマットとなっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF&#34;&gt;https://github.com/KhronosGroup/glTF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gltfはどんな情報を記録できるのか&#34;&gt;glTFはどんな情報を記録できるのか&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メッシュ(頂点配列、インデックス配列)
&lt;ul&gt;
&lt;li&gt;モーフターゲット&lt;/li&gt;
&lt;li&gt;スキニング(4weight)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テクスチャ&lt;/li&gt;
&lt;li&gt;マテリアル(PBR)&lt;/li&gt;
&lt;li&gt;シーン&lt;/li&gt;
&lt;li&gt;アニメーション&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;カメラ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;光源&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3Dのシーン全体を記録できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenGLの右手系Y-UP座標&lt;/li&gt;
&lt;li&gt;メートル単位&lt;/li&gt;
&lt;li&gt;リトルエンディアン&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gltfフォーマット概説&#34;&gt;glTFフォーマット概説&lt;/h2&gt;
&lt;p&gt;JSON記述部と、画像や頂点配列を記録するバイナリ部の２つの部分からなります。&lt;/p&gt;
&lt;p&gt;gltf形式では、URLやパスで参照する方法で外部のバイナリデータにアクセスします。
glb形式ではJSON部とバイナリ部をひとつのファイルにまとめていて、バイト列のオフセットでバイナリデータにアクセスします。
プログラムから扱うには外部ファイルへのアクセスが無いglb形式の方が簡単&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;glb形式&#34;&gt;glb形式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ヘッダ部 + チャンク部繰り返し&lt;/code&gt;という構造になっています。
実質的には、
&lt;code&gt;ヘッダ部 + JSON CHUNk + BINARY CHUNK&lt;/code&gt;となります。&lt;/p&gt;
&lt;p&gt;ヘッダ部&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;長さ&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;内容&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ascii&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;ldquo;glTF&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gltfバージョン&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;file size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;チャンク部&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;長さ&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;内容&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;chunk size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;chunk type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ascii&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;ldquo;JSON&amp;rdquo; or &amp;ldquo;BIN\x00&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;chunk size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;chunk body&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;バイト列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;python3によるパース例&#34;&gt;python3によるパース例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;struct&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;json&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Reader&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, data: &lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;None:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read_str&lt;/span&gt;(self, size):
        result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; size]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; size
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read&lt;/span&gt;(self, size):
        result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; size]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; size
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; result

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read_uint&lt;/span&gt;(self):
        result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; struct&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpack(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos:self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;])[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pos &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; result


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parse_glb&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;):
    reader &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Reader(data)
    magic &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; reader&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read_str(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  magic &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;glTF&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(f&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;magic not found: #{magic}&amp;#39;&lt;/span&gt;)

    version &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; reader&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read_uint()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; version &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(f&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;version:#{version} is not 2&amp;#39;&lt;/span&gt;)

    size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; reader&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read_uint()
    size &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;

    json_str &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; None
    body &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; None
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(size)&lt;/span&gt;

        chunk_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; reader&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read_uint()
        size &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;

        chunk_type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; reader&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read_str(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
        size &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;

        chunk_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; reader&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read(chunk_size)
        size &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; chunk_size

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; chunk_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;BIN&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;:
            body &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; chunk_data
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; chunk_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;JSON&amp;#39;&lt;/span&gt;:
            json_str &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; chunk_data
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(f&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;unknown chunk_type: {chunk_type}&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loads(json_str), body


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;AliciaSolid.vrm&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
    parsed, body &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parse_glb(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;vrmによる拡張情報&#34;&gt;VRMによる拡張情報&lt;/h2&gt;
&lt;p&gt;JSONの&lt;code&gt;json[&#39;extensions&#39;][&#39;VRM&#39;]&lt;/code&gt;以下に格納されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.ja.md&#34;&gt;VRM仕様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vrmのgltf部分を3d-builderで表示する&#34;&gt;VRMのglTF部分を3D Builderで表示する&lt;/h2&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/alicia_3dbuilder.png&#34;   /&gt;

&lt;p&gt;～.vrmとなっているファイル拡張子を ～.glb に変更すると、&lt;strong&gt;Windows 10標準搭載の3D Builderで読み込み確認することができます&lt;/strong&gt;（ただしVRM独自の設定は反映されません)。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;VRMではサポートしていません &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;VRMではglbを採用しています。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: UniGLTF</title>
      <link>https://vrm.dev/docs/univrm/gltf/unigltf/</link>
      <pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/gltf/unigltf/</guid>
      <description>
        
        
        &lt;p&gt;この記事は、 &lt;code&gt;UniVRM-0.63.2&lt;/code&gt; 以降を対象としています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UniVRM&lt;/code&gt; に内包されていた &lt;code&gt;UniGLTF&lt;/code&gt; を単体で使えるように整理しました。
&lt;code&gt;Assets/UniGLTF&lt;/code&gt; フォルダに展開されます。&lt;/p&gt;
&lt;h2 id=&#34;unitypackage&#34;&gt;UnityPackage&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;UniVRM-0.XX.unitypackage&lt;/code&gt; でインストールできます。
&lt;code&gt;Assets/VRM&lt;/code&gt; を削除すると &lt;code&gt;glTF&lt;/code&gt; 関連の機能だけを単体で利用できます。&lt;/p&gt;
&lt;h2 id=&#34;upm&#34;&gt;UPM&lt;/h2&gt;
&lt;p&gt;UniGLTF は　VRMShaders に依存しています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.63.2&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.63.2&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unigltf-に含まれる機能&#34;&gt;UniGLTF に含まれる機能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;glTF/glb の読み書き&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gltf拡張&#34;&gt;glTF拡張&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;KHR_materials_unlit の読み書き
&lt;ul&gt;
&lt;li&gt;unityの unlit 系マテリアルのエクスポート&lt;/li&gt;
&lt;li&gt;VRMShadersの &lt;a href=&#34;https://vrm.dev/docs/univrm/shaders/univrm_unlit/&#34;&gt;UniUnlit&lt;/a&gt; shader としてのインポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KHR_texture_transform の読み書き&lt;/li&gt;
&lt;li&gt;morphTarget(blendShape)の名前を &lt;code&gt;/meshes/*/primitives/*/extras/targetNames&lt;/code&gt;, &lt;code&gt;/meshes/*/extras/targetNames&lt;/code&gt; に読み書きする&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Glbインポート</title>
      <link>https://vrm.dev/docs/univrm/gltf/glb_import/</link>
      <pubDate>Mon, 12 Oct 2020 17:04:00 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/gltf/glb_import/</guid>
      <description>
        
        
        &lt;h2 id=&#34;エディタモードでglbファイルをインポートする&#34;&gt;エディタモードでGlbファイルをインポートする&lt;/h2&gt;
&lt;p&gt;インポートする手順は&lt;a href=&#34;https://vrm.dev/docs/univrm/import/univrm_import/&#34;&gt;VRM import&lt;/a&gt;と同じです。UnityのAssetsにドラッグ＆ドロップするだけでGlbファイルをインポートできます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v0.68.0&lt;/code&gt; 以降。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet&#34;&gt;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;をサンプルに使っています。&lt;/p&gt;
&lt;h3 id=&#34;reverseaxis-反転軸の設定&#34;&gt;&lt;code&gt;ReverseAxis&lt;/code&gt; 反転軸の設定&lt;/h3&gt;
&lt;p&gt;glTFの右手系Y-UP から Unityの左手系Y-UP に変換するときに反転する軸を選択できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Z軸 (v0.68.0 より前と同じ)&lt;/li&gt;
&lt;li&gt;X軸 (v0.68.0 から追加)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_axis.gif&#34;  width=&#34;400&#34; /&gt;

&lt;p&gt;選択して &lt;code&gt;Apply&lt;/code&gt; を押すと反映されます。&lt;/p&gt;
&lt;h3 id=&#34;extract-materials-and-textures-&#34;&gt;&lt;code&gt;Extract Materials and Textures ...&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;fbx の import と同様に Material と Texture が glb の配下に import されます。
この状態では、Material と Texture は Readonly で設定を変更できません。&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_material_tab.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;p&gt;&lt;code&gt;Extract Materials and Textures ...&lt;/code&gt; を押すことで Material と Texture を外部アセット(&lt;code&gt;Material.asset&lt;/code&gt;, &lt;code&gt;Texture.png/jpg&lt;/code&gt;) として展開します。
通常の Material と同様に設定を変更できます。&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_material_tab_extracted.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;p&gt;&lt;code&gt;Remaped Materials&lt;/code&gt;と &lt;code&gt;Remaped Textures&lt;/code&gt; に参照しているリソースが設定されます。
&lt;code&gt;Clear&lt;/code&gt; で extract する前の状態に戻ります。&lt;/p&gt;
&lt;h3 id=&#34;glb-の-extract&#34;&gt;glb の extract&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&#34;&gt;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;初期状態(clear)では、関連する Asset (Mesh, Material, Texture, AnimationClip)は SubAsset として配下にあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;texture_1.metallicRoughness&lt;/code&gt; は、&lt;code&gt;texture_1&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;a href=&#34;https://vrm.dev/docs/univrm/shaders/texture_import/&#34;&gt;テクスチャーのインポート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_3.occlusion&lt;/code&gt; は、 &lt;code&gt;textrue_3&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;a href=&#34;https://vrm.dev/docs/univrm/shaders/texture_import/&#34;&gt;テクスチャーのインポート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_4.normal&lt;/code&gt; は、 &lt;code&gt;textrue_4&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;a href=&#34;https://vrm.dev/docs/univrm/shaders/texture_import/&#34;&gt;テクスチャーのインポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_clear.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;h4 id=&#34;extract&#34;&gt;extract&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Extract Materials and Textures ...&lt;/code&gt; を押すと下記のように変化します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Material_MR.mat&lt;/code&gt; の生成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_0.jpg&lt;/code&gt; の生成(color)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_1.metallicRoughness.png&lt;/code&gt; の生成。&lt;code&gt;texture_1&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_2.jpg&lt;/code&gt; の生成(emission)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_3.occlusion.png&lt;/code&gt; の生成。&lt;code&gt;textrue_3&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_4.jpg&lt;/code&gt; の生成(normalMap)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_extract.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;h3 id=&#34;gltf-の-extract&#34;&gt;gltf の extract&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&#34;&gt;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;clear-1&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;初期状態(clear)では、関連する Asset (Mesh, Material, Texture(変換が必要なもの), AnimationClip)は SubAsset として配下にあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default_AO.occlusion&lt;/code&gt; は、 &lt;code&gt;Default_AO&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;a href=&#34;https://vrm.dev/docs/univrm/shaders/texture_import/&#34;&gt;テクスチャーのインポート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Defualt_metalRoughness.metallicRoughness&lt;/code&gt; は、&lt;code&gt;Defualt_metalRoughness&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;a href=&#34;https://vrm.dev/docs/univrm/shaders/texture_import/&#34;&gt;テクスチャーのインポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/gltf_clear.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;h4 id=&#34;extract-1&#34;&gt;extract&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Extract Materials and Textures ...&lt;/code&gt; を押すと下記のように変化します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Material_MR.mat&lt;/code&gt; の生成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Default_AO.occlusion.png&lt;/code&gt; の生成。&lt;code&gt;Default_AO&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Default_metalRoughness.metallicRoughness.png&lt;/code&gt; の生成。&lt;code&gt;Default_metalRoughness&lt;/code&gt; を元に Unity の Standard Shader 向けに変換したものです。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/gltf_extract.jpg&#34;  width=&#34;400&#34; /&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Glbエクスポート</title>
      <link>https://vrm.dev/docs/univrm/gltf/how_to_create_glb/</link>
      <pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/gltf/how_to_create_glb/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;v0.68.0&lt;/code&gt; 以降&lt;/p&gt;
&lt;p&gt;UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p&gt;
&lt;h3 id=&#34;1-unigltfexport-unigltf-2xy-メニューからダイアログを開きます&#34;&gt;1. &lt;code&gt;UniGLTF/Export UniGLTF-2.X.Y&lt;/code&gt; メニューからダイアログを開きます&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_export_dialog.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-exportroot-に対象の-gameiobject-をセットしてください&#34;&gt;2. &lt;code&gt;ExportRoot&lt;/code&gt; に対象の GameIObject をセットしてください&lt;/h3&gt;
&lt;p&gt;ドラッグアンドドロップや、右の◎ボタンを押すことで選択できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-export-を押す&#34;&gt;3. &lt;code&gt;Export&lt;/code&gt; を押す&lt;/h3&gt;
&lt;p&gt;ファイル保存ダイアログが表示されるので出力先を指定してください。&lt;/p&gt;
&lt;h2 id=&#34;glbのエクスポート対象になるコンポーネント&#34;&gt;Glbのエクスポート対象になるコンポーネント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MeshRenderer + MeshFilter&lt;/code&gt; (一番親以外の子供につけてください)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SkinnedMeshRenderer&lt;/code&gt; (一番親以外の子供につけてください)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Animation&lt;/code&gt; (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;対応しているshader&#34;&gt;対応しているShader&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Standard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unlit/Color&lt;/code&gt;, &lt;code&gt;Unlit/Texture&lt;/code&gt;, &lt;code&gt;Unlit/Transparent&lt;/code&gt;, &lt;code&gt;Unlit/Transparent Cutout&lt;/code&gt;, &lt;code&gt;UniGLTF/UniUnlit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;v0680-より前&#34;&gt;&lt;code&gt;v0.68.0&lt;/code&gt; より前&lt;/h1&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;
&lt;p&gt;UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p&gt;
&lt;h3 id=&#34;1-空のシーンを用意します&#34;&gt;1. 空のシーンを用意します。&lt;/h3&gt;
&lt;h3 id=&#34;2-一番親になるemptyを作成します移動回転拡縮は無し&#34;&gt;2. 一番親になるemptyを作成します。移動・回転・拡縮は無し。&lt;/h3&gt;
&lt;p&gt;一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/p&gt;
&lt;h3 id=&#34;3-エクスポートしたいオブジェクトをemptyの子にします&#34;&gt;3. エクスポートしたいオブジェクトをemptyの子にします。&lt;/h3&gt;
&lt;p&gt;(この例ではCubeを作成しました。Prefab等任意のオブジェクトを追加できます)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vrm.dev/images/wiki/root_cube.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-一番親のオブジェクトを選択してエクスポートメニューを起動します&#34;&gt;4. 一番親のオブジェクトを選択して、エクスポートメニューを起動します。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://vrm.dev/images/wiki/menu_unigltf_export.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-ファイル名を選択して-glb-ファイルを書き出せば完了です&#34;&gt;5. ファイル名を選択して &lt;code&gt;glb&lt;/code&gt; ファイルを書き出せば完了です。&lt;/h3&gt;
&lt;h2 id=&#34;glbのエクスポート対象になるコンポーネント-1&#34;&gt;Glbのエクスポート対象になるコンポーネント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MeshRenderer + MeshFilter&lt;/code&gt; (一番親以外の子供につけてください)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SkinnedMeshRenderer&lt;/code&gt; (一番親以外の子供につけてください)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Animation&lt;/code&gt; (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;対応しているshader-1&#34;&gt;対応しているShader&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Standard&lt;/code&gt; もしくは &lt;code&gt;Unlit/Color&lt;/code&gt;, &lt;code&gt;Unlit/Texture&lt;/code&gt;, &lt;code&gt;Unlit/Transparent&lt;/code&gt;, &lt;code&gt;Unlit/Transparent Cutout&lt;/code&gt;, &lt;code&gt;UniGLTF/UniUnlit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: アニメーション</title>
      <link>https://vrm.dev/docs/univrm/gltf/animation_exporter/</link>
      <pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/gltf/animation_exporter/</guid>
      <description>
        
        
        &lt;p&gt;GLTF は、Animation の定義があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VRM は、Animation を使わないという仕様です&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;対応バージョン&#34;&gt;対応バージョン&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;v0.44&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;対応状況&#34;&gt;対応状況&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;KeyName&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;TranslationKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RotationKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ScaleKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BlendShapeKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;animatorをエクスポートする場合&#34;&gt;Animatorをエクスポートする場合&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;ルートGameObjectにAnimatorコンポーネントを追加&lt;/li&gt;
&lt;li&gt;AnimatorControllerを作成し、それをAnimatorのController項目に設定&lt;/li&gt;
&lt;li&gt;UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li&gt;
&lt;li&gt;ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li&gt;
&lt;li&gt;このクリップに対してアニメーションキーを追加&lt;/li&gt;
&lt;li&gt;UniGLTF&amp;gt;Exportからglbを出力する&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;animationをエクスポートする場合&#34;&gt;Animationをエクスポートする場合&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;ルートGameObjectにAnimationコンポーネントを追加&lt;/li&gt;
&lt;li&gt;UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li&gt;
&lt;li&gt;ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li&gt;
&lt;li&gt;Inspectorの設定をDebugモードにしてAnimationClipのLegacyフラグをONにする&lt;br&gt;
&lt;img src=&#34;https://vrm.dev/images/wiki/LegacyClip.png&#34; alt=&#34;Interpolation&#34;&gt;&lt;/li&gt;
&lt;li&gt;AnimationコンポーネントのAnimation項目に作成したAnimationClipを設定&lt;/li&gt;
&lt;li&gt;クリップに対してアニメーションキーを追加&lt;/li&gt;
&lt;li&gt;UniGLTF&amp;gt;Exportからglbを出力する&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;注意事項&#34;&gt;注意事項&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;RotationKeyのInterpolation設定をQuaternionかまたはEulerAngles(Quaternion)にすること&lt;br&gt;
&lt;img src=&#34;https://vrm.dev/images/wiki/Interpolation.png&#34; alt=&#34;Interpolation&#34;&gt;&lt;/li&gt;
&lt;li&gt;Animatorの場合は設定されている全てのClipを検索して書き出しをしているが、ステートの状態などは出力されない&lt;/li&gt;
&lt;li&gt;Animator経由だと複数のアニメーションが書き込まれるが、UniGLTFのImporterが読み込むのは最初の１つだけ(UniGLTF-1.25時点）&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Mesh Utility</title>
      <link>https://vrm.dev/docs/univrm/gltf/mesh_utility/</link>
      <pubDate>Wed, 21 Apr 2021 16:09:47 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/gltf/mesh_utility/</guid>
      <description>
        
        
        &lt;h1 id=&#34;meshutility&#34;&gt;MeshUtility&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;MeshUtility&lt;/code&gt;はメッシュ処理のツールです。&lt;br&gt;
現在利用可能な機能： &lt;code&gt;MeshSeparator&lt;/code&gt;、&lt;code&gt;MeshIntegrator&lt;/code&gt;、&lt;code&gt;StaticMeshIntegrator&lt;/code&gt;と&lt;code&gt;BoneMeshEraser&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用例&#34;&gt;使用例&lt;/h2&gt;
&lt;p&gt;ここでは、&lt;code&gt;MeshSeparator&lt;/code&gt;の使い方を紹介していきます。他の機能の使い方は大体同じです。&lt;br&gt;
&lt;code&gt;MeshSeparator&lt;/code&gt;が適用されると、BlendShapeを含むメッシュは分割されます。
先ず、ヒエラルキーにモデルのGameObjectを選択します。&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_utility_exp1.jpg&#34;  width=&#34;200&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;または、GameObjectを&lt;code&gt;TargetObject&lt;/code&gt;フィールドにドラッグ＆ドロップします。&lt;br&gt;
メッシュ処理のウィンドウを表示するため、メニューから&lt;code&gt;UniGLTF&lt;/code&gt; -&amp;gt; &lt;code&gt;MeshUtility&lt;/code&gt; -&amp;gt; &lt;code&gt;MeshProcessing Wizard&lt;/code&gt;をクリックしてください：&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_utility_ja_exp2.jpg&#34;  width=&#34;800&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Process&lt;/code&gt;ボタンをクリックすると、処理したモデルのGameObjectを生成されます。このGameObjectを選択してエクスポータします（&lt;code&gt;VRM0&lt;/code&gt; -&amp;gt; &lt;code&gt;Export UniVRM-0.xx&lt;/code&gt;）。&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_utility_exp3.jpg&#34;  width=&#34;300&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;分割されたメッシュも&lt;code&gt;Assets&lt;/code&gt;フォルダーに保存されます。&lt;br&gt;
この例では、モデルのメッシュは顔と体の2つの部分に分割された。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;顔: BlendShapeを含む      　&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;体: BlendShapeを含まない&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_sep_result_1.jpg&#34;  width=&#34;200&#34; /&gt;
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_sep_result_2.jpg&#34;  width=&#34;200&#34; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;meshseparator&#34;&gt;MeshSeparator&lt;/h3&gt;
&lt;p&gt;BlendShapeを含むメッシュは分割されます。BlendShapeのサイズを削減できます。&lt;/p&gt;
&lt;h3 id=&#34;meshintegrator&#34;&gt;MeshIntegrator&lt;/h3&gt;
&lt;p&gt;Prefab GameObjectのすべてのメッシュを統合します。BlendShapeを含むメッシュは独立して統合されます。&lt;/p&gt;
&lt;h3 id=&#34;staticmeshintegrator&#34;&gt;StaticMeshIntegrator&lt;/h3&gt;
&lt;p&gt;Prefab GameObjectのすべての静的メッシュを一つに統合します。&lt;/p&gt;
&lt;h3 id=&#34;bonemesheraser&#34;&gt;BoneMeshEraser&lt;/h3&gt;
&lt;p&gt;ボーン（Erase Rootのヒエラルキー）に関連するメッシュを削除します。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 拡張を実装する</title>
      <link>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</link>
      <pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;UniVRM-0.63.2&lt;/code&gt; から &lt;a href=&#34;https://vrm.dev/docs/univrm/gltf/unigltf/&#34;&gt;UniGLTF&lt;/a&gt; の構成が変わって、 &lt;code&gt;extensions&lt;/code&gt; / &lt;code&gt;extras&lt;/code&gt; の実装方法が変わりました。&lt;/p&gt;
&lt;h2 id=&#34;gltf-拡張とは&#34;&gt;GLTF 拡張とは&lt;/h2&gt;
&lt;p&gt;例 &lt;a href=&#34;https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras&#34;&gt;https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;asset&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2.0&lt;/span&gt;,
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;extras&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;#34;&lt;/span&gt;,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;名前(JsonPath)が &lt;code&gt;asset.extras.guid&lt;/code&gt; で値が &lt;code&gt;&amp;quot;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;quot;&lt;/code&gt; です。
&lt;code&gt;extensions&lt;/code&gt; (&lt;code&gt;extras&lt;/code&gt; 。複数形に注意) の&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JsonPath。例 &lt;code&gt;extensions.VRM&lt;/code&gt;, &lt;code&gt;asset.extras.guid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;型、内容。例 object(VRMに関する諸々), string(guid文字列)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の取り決めが &lt;code&gt;GTTF拡張&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extensions&lt;/code&gt; はオフィシャルに仕様を策定して &lt;code&gt;JsonSchema&lt;/code&gt; として公開する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF/tree/master/extensions&#34;&gt;https://github.com/KhronosGroup/glTF/tree/master/extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;extras&lt;/code&gt; は &lt;code&gt;JsonSchema&lt;/code&gt; を作るほどでもないちょっとした追加データを手軽に追加という気持ちの違いです。仕組みは同じです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This enables glTF models to contain application-specific properties without creating a full glTF extension&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;extensions&lt;/code&gt; は、&lt;code&gt;{ベンダー名}_{拡張名}&lt;/code&gt; という命名規則です。
ベンダー名は、 &lt;a href=&#34;https://github.com/KhronosGroup/glTF&#34;&gt;https://github.com/KhronosGroup/glTF&lt;/a&gt; に申し込んで登録できます。&lt;/p&gt;
&lt;h2 id=&#34;unigltf-の-extensions&#34;&gt;UniGLTF の extensions&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;v0.63.0&lt;/code&gt; 以前は、&lt;code&gt;GLTF 型&lt;/code&gt; の &lt;code&gt;extensions&lt;/code&gt; フィールドに、&lt;code&gt;GLTFExtensions&lt;/code&gt; 型を定義して、&lt;code&gt;VRM&lt;/code&gt; フィールドを定義するという方法をとっていました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;VRM&lt;/span&gt;
{

}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GLTFExtensions&lt;/span&gt;
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; VRM VRM;
}

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// すべての拡張の型を事前に知っている必要があり、拡張を分離できない
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GLTF&lt;/span&gt;
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; GLTFExtensions extensions;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 個々の extensions に対して別個の型を定義する必要がある
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GLTFMaterialExtensions&lt;/span&gt;
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; KHR_materials_unlit KHR_materials_unlit;
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GLTFMaterial&lt;/span&gt;
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; GLTFMaterialExtensions extensions;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この設計だと GLTF と拡張を別ライブラリとして分離することができませんでした。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v0.63.1&lt;/code&gt; から設計を変更して、すべての &lt;code&gt;extensions/extras&lt;/code&gt; に同じ型の入れ物を使うように変更しました。
UniGLTF は &lt;code&gt;import/export&lt;/code&gt; の具体的な内容を知らずに中間データの入れ物として扱います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// extensions / extras の入れ物として使う型
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 実行時は、 glTFExtensionImport / glTFExtensionExport を使う
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;glTFExtension&lt;/span&gt;
{

}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GLTF&lt;/span&gt;
{
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// UniGLTFは具体的な型を知らない。利用側が処理(serialize/deserialize)する
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; glTFExtension extensions;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unigltf-の拡張の書き方&#34;&gt;UniGLTF の拡張の書き方&lt;/h2&gt;
&lt;p&gt;拡張は、以下の部品要素から作れます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前(JsonPath)。例: &lt;code&gt;extensions.VRM&lt;/code&gt;, &lt;code&gt;materials[*].extensions.KHR_materials_unlit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拡張の型。&lt;code&gt;T型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;デシリアライザー(import)。 &lt;code&gt;jsonバイト列 =&amp;gt; T型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;シリアライザーexport)。&lt;code&gt;T型 =&amp;gt; jsonバイト列&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jsonpath-と-型を決める&#34;&gt;JSONPATH と 型を決める&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 型
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GoodMaterial&lt;/span&gt;
{
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// `materials[*].extensions.CUSTOM_materials_good`
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; EXTENSION_NAME = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;CUSTOM_materials_good&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; GoodValue;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;import&#34;&gt;import&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;GoodMaterial DeserializeGoodMaterial(ListTreeNode&amp;lt;JsonValue&amp;gt; json)
{
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// デシリアライズ。手で書くかコード生成する(後述)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ユーティリティ関数例
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; TryGetExtension&amp;lt;T&amp;gt;(UniGLTF.glTFExtension extension, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; key, Func&amp;lt;ListTreeNode&amp;lt;JsonValue&amp;gt;, T&amp;gt; deserializer, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;out&lt;/span&gt; T &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;value&lt;/span&gt;)
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(material.extensions &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;is&lt;/span&gt; UniGLTF.glTFExtensionsImport import)
    {
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// null check 完了
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; kv &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;in&lt;/span&gt; import.ObjectItems())
        {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(kv.key.GetString()==key)
            {
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;value&lt;/span&gt; = Deserialize(kv.Value);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;;
            }
        }
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;default&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;;
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; ImportMaterial(UniGLTF.glTFMaterial material)
{
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// material の処理に割り込んで
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(TryGetExtension(material.extension, GoodMaterial.EXTENSION_NAME, DeserializeGoodMaterial, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;out&lt;/span&gt; GoodMaterial good))
    {
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// good material 独自の処理
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;export&#34;&gt;export&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; SerializeGoodMaterial(UniJSON.JsonFormatter f, GoodMaterial &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;value&lt;/span&gt;)
{
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// シリアライズ。手で書くかコード生成する(後述)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ユーティリティ関数例
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; ArraySegment&amp;lt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&amp;gt; SerializeExtension&amp;lt;T&amp;gt;(T &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;value&lt;/span&gt;, Func&amp;lt;T, ArraySegment&amp;lt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&amp;gt;&amp;gt; serialize)
{
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; f = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; UniJSON.JsonFormatter();
    serialize(f, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;value&lt;/span&gt;);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f.GetStoreBytes();
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; ExportGoodMaterial(UniGLTF.glTFMaterial material, GoodMaterial good)
{
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// material の処理に割り込んで
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(!(material.extensions &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;is&lt;/span&gt; UniGLTF.glTFExtensionsExport export))
    {
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 無かった。新規作成
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        export = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; UniGLTF.glTFExtensionsExport();
        material.extensions = export;
    }

    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; bytes = SerializeExtension(good, SerializeGoodMaterial);
    export.Add(GoodMaterial.EXTENSION_NAME, bytes);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;実装例&#34;&gt;実装例&lt;/h2&gt;
&lt;h3 id=&#34;gltf-gltf全体&#34;&gt;GLTF: GLTF全体&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;C#の型からコード生成&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Runtime\UniGLTF\Format\GltfSerializer.g.cs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Runtime\UniGLTF\Format\GltfDeserializer.g.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ジェネレーターの呼び出しコード&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成コードの呼び出し&lt;/p&gt;
&lt;h3 id=&#34;gltf-meshesextrastargetnames&#34;&gt;GLTF: &lt;code&gt;meshes[*].extras.targetNames&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;コード生成せずに手書き&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\gltf_mesh_extras_targetNames.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成コードの呼び出し&lt;/p&gt;
&lt;h3 id=&#34;gltf-materialsextensionskhr_materials_unlit&#34;&gt;GLTF: &lt;code&gt;materials[*].extensions.KHR_materials_unlit&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;コード生成せずに手書き&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_materials_unlit.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成コードの呼び出し&lt;/p&gt;
&lt;h3 id=&#34;gltf-materialsextensionskhr_texture_transform&#34;&gt;GLTF: &lt;code&gt;materials[*].extensions.KHR_texture_transform&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;コード生成せずに手書き&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_texture_transform.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成コードの呼び出し&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296&#34;&gt;https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193&#34;&gt;https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vrm0-extensionsvrm&#34;&gt;VRM0: &lt;code&gt;extensions.VRM&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;C#の型からコード生成&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM\Runtime\Format\VRMSerializer.g.cs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM\Runtime\Format\VRMDeserializer.g.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ジェネレーターの呼び出しコード&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM\Editor\VRMSerializerGenerator.cs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM\Editor\VRMDeserializerGenerator.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成コードの呼び出し&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41&#34;&gt;https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209&#34;&gt;https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vrm1-extensionsvrmc_vrm-など&#34;&gt;VRM1: &lt;code&gt;extensions.VRMC_vrm&lt;/code&gt; など&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;JsonSchemaからコード生成&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5つの Extensions に分かれたので個別に作成。
ささる場所(JsonPath)が違うのに注意。&lt;/p&gt;
&lt;h4 id=&#34;extensionsvrmc_vrm&#34;&gt;&lt;code&gt;extensions.VRMC_vrm&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM10\Runtime\Format\VRM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;materialsextensionsvrmc_materials_mtoon&#34;&gt;&lt;code&gt;materials[*].extensions.VRMC_materials_mtoon&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM10\Runtime\Format\MaterialsMToon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nodesextensionsvrmc_node_collider&#34;&gt;&lt;code&gt;nodes[*].extensions.VRMC_node_collider&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM10\Runtime\Format\NodeCollider&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extensionsvrmc_springbone&#34;&gt;&lt;code&gt;extensions.VRMC_springBone&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM10\Runtime\Format\SpringBone&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extensionsvrmc_vrm_constraints&#34;&gt;&lt;code&gt;extensions.VRMC_vrm_constraints&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM10\Runtime\Format\Constraints&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ジェネレーターの呼び出しコード&#34;&gt;ジェネレーターの呼び出しコード&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\VRM10\Editor\GeneratorMenu.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;生成コードの呼び出し&#34;&gt;生成コードの呼び出し&lt;/h4&gt;
&lt;h2 id=&#34;コード生成&#34;&gt;コード生成&lt;/h2&gt;
&lt;p&gt;JSON と C# の型との シリアライズ/デシリアライズは定型コードになるので、ジェネレーターがあります。
C# の型から生成するものと、JsonSchema から C# の型とともに生成するものがあります。&lt;/p&gt;
&lt;h3 id=&#34;c-の型から生成&#34;&gt;C# の型から生成&lt;/h3&gt;
&lt;h4 id=&#34;シリアライザー&#34;&gt;シリアライザー&lt;/h4&gt;
&lt;p&gt;ジェネレーターを呼び出すコードを作成します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元になる型&lt;/li&gt;
&lt;li&gt;出力先&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p&gt;
&lt;p&gt;例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.Collections.Generic&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.IO&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.Reflection&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.Text&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UniJSON&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEditor&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEngine&lt;/span&gt;;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UniGLTF&lt;/span&gt;
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;SerializerGenerator&lt;/span&gt;
    {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; Begin = &lt;span style=&#34;color:#c30&#34;&gt;@&amp;#34;// Don&amp;#39;t edit manually. This is generaged. 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;using System;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;using System.Collections.Generic;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;using UniJSON;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;namespace UniGLTF {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    static public class GltfSerializer
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; End = &lt;span style=&#34;color:#c30&#34;&gt;@&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    } // class
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;} // namespace
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; OutPath
        {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;get&lt;/span&gt;
            {
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Path.Combine(UnityEngine.Application.dataPath,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfSerializer.g.cs&amp;#34;&lt;/span&gt;);
            }
        }
&lt;span style=&#34;color:#309&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;        [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Serializer&amp;#34;)]&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; GenerateSerializer()
        {
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; info = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ObjectSerialization(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(glTF), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;gltf&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Serialize_&amp;#34;&lt;/span&gt;);
            Debug.Log(info);

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; s = File.Open(OutPath, FileMode.Create))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; w = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamWriter(s, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; UTF8Encoding(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;)))
            {
                w.Write(Begin);
                info.GenerateSerializer(w, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Serialize&amp;#34;&lt;/span&gt;);
                w.Write(End);
            }

            Debug.LogFormat(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;write: {0}&amp;#34;&lt;/span&gt;, OutPath);
            UnityPath.FromFullpath(OutPath).ImportAsset();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;デシリアライザー&#34;&gt;デシリアライザー&lt;/h4&gt;
&lt;p&gt;ジェネレーターを呼び出すコードを作成します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元になる型&lt;/li&gt;
&lt;li&gt;出力先&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p&gt;
&lt;p&gt;例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.IO&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.Reflection&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.Text&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEditor&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEngine&lt;/span&gt;;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UniGLTF&lt;/span&gt;
{
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/// Generate deserializer from ListTreeNode&amp;lt;JsonValue&amp;gt; to glTF using type reflection
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;DeserializerGenerator&lt;/span&gt;
    {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; Begin = &lt;span style=&#34;color:#c30&#34;&gt;@&amp;#34;// Don&amp;#39;t edit manually. This is generaged. 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;using UniJSON;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;using System;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;using System.Collections.Generic;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;using UnityEngine;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;namespace UniGLTF {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;public static class GltfDeserializer
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; End = &lt;span style=&#34;color:#c30&#34;&gt;@&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;} // GltfDeserializer
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;} // UniGLTF 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; OutPath
        {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;get&lt;/span&gt;
            {
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Path.Combine(UnityEngine.Application.dataPath,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfDeserializer.g.cs&amp;#34;&lt;/span&gt;);
            }
        }
&lt;span style=&#34;color:#309&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;        [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Deserializer&amp;#34;)]&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; GenerateSerializer()
        {
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; info = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ObjectSerialization(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(glTF), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;gltf&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Deserialize_&amp;#34;&lt;/span&gt;);
            Debug.Log(info);

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; s = File.Open(OutPath, FileMode.Create))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; w = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamWriter(s, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; UTF8Encoding(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;)))
            {
                w.Write(Begin);
                info.GenerateDeserializer(w, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Deserialize&amp;#34;&lt;/span&gt;);
                w.Write(End);
            }

            Debug.LogFormat(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;write: {0}&amp;#34;&lt;/span&gt;, OutPath);
            UnityPath.FromFullpath(OutPath).ImportAsset();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;キー出力の抑制&#34;&gt;キー出力の抑制&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;index&lt;/code&gt; に無効な値として &lt;code&gt;-1&lt;/code&gt; を入れる場合に、JSONではキーを出力しないとしたいことがあります。&lt;/p&gt;
&lt;p&gt;TODO: &lt;code&gt;int?&lt;/code&gt; にするべきだった&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#309&#34;&gt;[JsonSchema(Minimum = 0)]&lt;/span&gt;
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; index = -&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のようにすることで、キーの出力を抑制できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 生成コードのキー出力例
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;value&lt;/span&gt;.index&amp;gt;=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;){
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;何も付けないと&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 出力制御無し
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;){
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;enum-のエンコーディング&#34;&gt;enum のエンコーディング&lt;/h4&gt;
&lt;p&gt;enumの値の名前を文字列で使う、enumの値の数値を使うの2種類がありえます。
enumの場合はデフォルト値が無いので必須です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#309&#34;&gt;[JsonSchema(EnumSerializationType = EnumSerializationType.AsInt)]&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; glBufferTarget target;
&lt;span style=&#34;color:#309&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;[JsonSchema(EnumSerializationType = EnumSerializationType.AsLowerString)]&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; ProjectionType type;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;jsonschemaから生成&#34;&gt;JsonSchemaから生成&lt;/h3&gt;
&lt;p&gt;VRM-1.0 の実装&lt;/p&gt;
&lt;p&gt;TODO:&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
